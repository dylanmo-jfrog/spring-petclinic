# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven

name: Docker with Maven

on:
  workflow_dispatch: # The repository will be scanned on demand

# Set to true to ignore new version warnings
env:
  JFROG_CLI_AVOID_NEW_VERSION_WARNING: 'true'
  DOCKER_REPO: ${{ github.event.inputs.rt_docker_repo }}
  IMAGE_NAME: ${{ github.event.inputs.docker_image_name }}

permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  packages: write         # for uploading attestations
  contents: read          # read the contents permission
  security-events: write  # for uploading code scanning

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven

      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: https://${{ vars.JF_URL }}/
        with:
            oidc-provider-name: talet-github
            oidc-audience: talet-audience

      - name: Docker Authenticate
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
            
      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          provenance: false

      - name: Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish
