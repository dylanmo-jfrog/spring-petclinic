# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven

name: Jfrog Build

on:
  workflow_dispatch: # The repository will be scanned on demand

# Set to true to ignore new version warnings
env:
  JFROG_CLI_AVOID_NEW_VERSION_WARNING: 'true'
  
permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  contents: read          # read the contents permission

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
    env:
      DOCKER_REPO: ${{ github.event.inputs.rt_docker_repo }}
      IMAGE_NAME: ${{ github.event.inputs.docker_image_name }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven    

      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            oidc-provider-name:  setup-jfrog-cli
            oidc-audience: jfrog-github

      - name: Build with Maven Wrapper
        run: |
          jf mvn-config \
            --repo-resolve-releases=spc-maven-virtual-releases \
            --repo-resolve-snapshots=spc-maven-virtual-snapshots \
            --repo-deploy-releases=spc-maven-releases-local \
            --repo-deploy-snapshots=spc-maven-snapshots-local
          jf mvn spring-boot:build-image

      - name: Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish
          jf audit
