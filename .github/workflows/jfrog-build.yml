name: Jfrog Build

on:
  workflow_dispatch: # The repository will be scanned on demand
  push:
    branches:
      - main
      - develop
      - 'release/*'

env:
  JFROG_CLI_AVOID_NEW_VERSION_WARNING: 'true'
  
permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  contents: write         # for creating fixing pull requests and pushing changes
  pull-requests: write    # for creating pull requests to fix vulnerabilities
  security-events: write  # for uploading SARIF results to GitHub Code Scanning

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven     

      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            oidc-provider-name: setup-jfrog-cli
            oidc-audience: jfrog-github
          
      - name: Build with Maven
        id: build
        run: |
          jf mvn-config --repo-resolve-releases spc-dev-libs-release --repo-resolve-snapshots spc-dev-libs-snapshot --repo-deploy-releases spc-dev-libs-release --repo-deploy-snapshots spc-dev-libs-snapshot
          
          # Run curation audit and capture output
          audit_output=$(jf ca 2>&1)
          echo "$audit_output"
          
          # Check if blocked packages were found
          if echo "$audit_output" | grep -q "Found [1-9][0-9]* blocked packages"; then
            echo "::error::Curation audit detected blocked packages - failing build"
            echo "curation_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          jf mvn -B verify -DskipTests
          
      - name: Build Docker image
        run: jf mvn spring-boot:build-image -DskipTests

      - name: Docker Login
        run: docker login dylanmo.jfrog.io -u ${{ vars.JF_USER }} -p ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Tag Docker image
        run: docker tag spring-petclinic:3.5.0-SNAPSHOT dylanmo.jfrog.io/dylanmo-docker/spring-petclinic:3.5.0-SNAPSHOT.${{ github.run_number }}
      - name: Push Docker image
        run: docker push dylanmo.jfrog.io/dylanmo-docker/spring-petclinic:3.5.0-SNAPSHOT.${{ github.run_number }}

      - name: Publish Build Info
        if: steps.build.outputs.curation_failed != 'true'
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt bp docker-build ${{ github.run_number }}
          jf rt build-publish
          jf build-scan
          jf build-scan docker-build